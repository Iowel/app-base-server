{{define "base"}}
<!doctype html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-+0n0xVW2eSR5OomGNYDnhzAbDsOXxcvSN1TPprVMTNDbiYZCxYbOOl7+AMvyTG2x" crossorigin="anonymous">


<style>

/* Стили для уведомлений */
.notification {
  position: fixed;
  bottom: 20px;
  left: 50%;
  transform: translateX(-50%);
  padding: 10px 20px;
  background-color: #444;
  color: white;
  border-radius: 5px;
  opacity: 0;
  transition: opacity 0.5s ease-in-out;
  z-index: 1000;
}

.notification.show {
  opacity: 1;
}

.notification.success {
  background-color: #28a745;
}

.notification.error {
  background-color: #dc3545;
}









  @media (max-width: 576px) {
    .navbar-nav .nav-link {
      font-size: 0.9rem;
      padding-left: 0.75rem;
      padding-right: 0.75rem;
    }

    #user-balance {
      font-size: 0.8rem;
    }

    .dropdown-menu {
      font-size: 0.9rem;
    }
  }

  @media (min-width: 992px) {
    #user-balance {
      font-size: 1rem;
    }
  }



  


</style>


    <title>
    {{block "title" .}}

    {{end}}
    </title>
  </head>
  <body>


   <nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid">
      <a class="navbar-brand" href="#">&nbsp;</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
          <li class="nav-item">
            <a class="nav-link active" aria-current="page" href="/home">Home</a>
          </li>
          




          {{if and (eq .IsAuthenticated 1) (eq .UserRole "admin")}}

          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
              Admin panel
            </a>
            <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
              
              <li><a class="dropdown-item" href="/plans/bronze">Subscription</a></li>
              <li><a class="dropdown-item" href="/all-users">Все пользователи</a></li>
            </ul>
          </li>


          {{end}}





          {{if eq .IsAuthenticated 1}}


          <li id="pr-link" class="nav-item d-none">
            <a class="nav-link" href="/admin/books">Книги</a>
          </li>

          {{/* <li id="pr-link" class="nav-item">
            <a class="nav-link" href="/kino">Kino</a>
          </li>          */}}


          <li id="pr-link" class="nav-item ">
            <a class="nav-link" href="/profile">Мой профиль</a>
          </li>


          <li id="pr-link" class="nav-item ">
            <a class="nav-link" href="/all-users-posts">Новости</a>
          </li>

          

          <li id="pr-link" class="nav-item ">
            <a class="nav-link" href="/shop">Товары</a>
          </li>

          <li id="pr-link" class="nav-item ">
            <a class="nav-link" href="/orders">Мои заказы</a>
          </li>

          <li id="form-link" class="nav-item">
            <a class="nav-link" href="/form">Обратная связь</a>
          </li>

          <li id="allUsers-link" class="nav-item ">
            <a class="nav-link" href="/users">Все пользователи</a>
          </li>

        </ul>



          <ul class="navbar-nav ms-auto mb-2 mb-lg-0">
            <li id="login-link" class="nav-item">
              <a class="nav-link" href="/logout">Logout</a></li>



         <!-- Отображение баланса -->
        <li class="nav-item">
          <a class="nav-link d-flex align-items-center">
            <i class="bi bi-wallet2 me-2"></i> <!-- Иконка для баланса -->
            <span id="user-balance" class="badge bg-success">Баланс: ₽</span>
          </a>
        </li>


        {{end}}





        {{if eq .IsAuthenticated 0}}

          <ul class="navbar-nav ms-auto mb-2 mb-lg-0">
            <li id="login-link" class="nav-item">
              <a class="nav-link" href="/login">Login</a></li>
            </li>
          </ul>


          <ul class="navbar-nav">
            <li id="register-link" class="nav-item">
          <a class="nav-link" href="/register">Register</a></li>
          </li>
        </ul>

        {{end}}



      </div>
    </div>
  </nav>

      <div class="container py-3 px-2 px-md-4">
        <div class="row">
            <div class="col">
                {{block "content" .}} {{end}}
            </div>
        </div>
    </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-gtEjrD/SeCtmISkJkNUaaKMoLD0//ElJ19smozuHV6z3Iehds+3Ulb9Bn9Plx0x4" crossorigin="anonymous"></script>



<script>

{{if eq .IsAuthenticated 1}}

    let UserRole = {{.UserRole}}; 
    console.log(UserRole);

  let socket;

  document.addEventListener("DOMContentLoaded", function(){
    socket = new WebSocket("ws://{{.FRONTAPI}}:8082/ws");

    socket.onopen = () => {
      console.log("Successfully connected to websockets");
    }

    socket.onclose = event => {
      console.log("WebSocket connection closed", event);
    };

    socket.onerror = error => {
       console.error("WebSocket error:", error);
    };


// получаем сообщения от сервера
    socket.onmessage = msg => {
      let data = JSON.parse(msg.data);

      switch (data.action) {
        case "logout":
          if (data.user_id === {{.UserID}}) {
            alert('Ваша учетная запись удалена!');
            logout();
          }
          break;
          default:

      }
    };
  });





document.addEventListener("DOMContentLoaded", function() {
    // Получаем ID пользователя из шаблона (предположительно передаётся через контекст Go)
    const userId = {{.UserID}}; 
    console.log(userId);

    // Функция для получения баланса пользователя
    async function getUserBalance() {
        try {
            const response = await fetch(`{{.SERVERIP}}/api/get_balance/${userId}`);
            const data = await response.json();
            if (response.ok) {
                // Обновляем элемент с балансом
                document.getElementById('user-balance').textContent = `Баланс: ${data} ₽`;
            } else {
                document.getElementById('user-balance').textContent = "Ошибка загрузки баланса";
            }
        } catch (error) {
            console.error("Ошибка:", error);
            document.getElementById('user-balance').textContent = "Ошибка загрузки баланса";
        }
    }

    // Загружаем баланс пользователя при загрузке страницы
    getUserBalance();

});





{{end}}


{{/* let loginLink = document.getElementById("login-link");
let registerLink = document.getElementById("register-link");
let profileLink = document.getElementById("pr-link");
let usersLink = document.getElementById("allUsers-link");


document.addEventListener("DOMContentLoaded", function(){
    if (localStorage.getItem("token") !== null) {
       loginLink.innerHTML = '<a class="nav-link" onclick="logout()" href="#!">Logout</a>';
       profileLink.classList.remove("d-none");
       usersLink.classList.remove("d-none");
       registerLink.classList.add("d-none");
    } else {
      loginLink.innerHTML = '<a class="nav-link" href="/login">Login</a>';
    }

    loginLink.classList.remove("d-none");
}) */}}

function logout() {
  localStorage.removeItem("token");
  localStorage.removeItem("token_expiry");
  location.href = "/logout";
}

function checkAuth() {
      if (localStorage.getItem("token") === null) {
      location.href = "/login";
      return;
      } else {
        let token = localStorage.getItem("token");
        const myHeaders = new Headers();
        myHeaders.append("Content-Type", "application/json");
        myHeaders.append("Authorization", "Bearer " + token);

        const requestOptions = {
          method: "POST",
          headers: myHeaders,
        }

        fetch("{{.AUTHSERVICEAPI}}/v1/verify_token", requestOptions)
        .then(response => response.json())
        .then(function(data){
          if (data.error === true) {
            console.log("Not logged in");
            location.href = "/login";
          } else {
            console.log("Logged in");
          }
        })
    }
}



function checkAuthRole() {
      if (localStorage.getItem("token") === null) {
      return;
      } else {
        let token = localStorage.getItem("token");
        const myHeaders = new Headers();
        myHeaders.append("Content-Type", "application/json");
        myHeaders.append("Authorization", "Bearer " + token);

        const requestOptions = {
          method: "POST",
          headers: myHeaders,
        }

      fetch("{{.AUTHSERVICEAPI}}/v1/verify_role", requestOptions)
        .then(response => response.json())
        .then(function(data) {
          if ('error' in data && data.error === true) {
            // Есть поле error и оно true — это ошибка
            console.error("Ошибка:", data.message);

            location.href = "/home";
          } else {
            // Нет поля error — значит всё хорошо
            console.log("Успех:", data.message);

            console.log("Logged in");
          }
        })
        .catch(error => {
          console.error("Ошибка запроса:", error);
        });
    }
}



  </script>



  {{block "js" .}}

  {{end}}

</body>
    
</html>


{{end}}